
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://uhqeuhysxkzptbvxgnvt.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVocWV1aHlzeGt6cHRidnhnbnZ0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE3MTU3NTQsImV4cCI6MjA1NzI5MTc1NH0.G0z9wnB5jk7Axk4uwTowLRrWw50v1BkL-7443hKr5Q8";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create a Supabase client
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Create required storage buckets if they don't exist
(async () => {
  try {
    // First check if buckets exist
    const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
    
    if (bucketsError) {
      console.error('Error checking buckets:', bucketsError);
      return;
    }
    
    const requiredBuckets = ['media', 'ad_media', 'profile_photos', 'profile'];
    
    for (const bucketName of requiredBuckets) {
      const bucketExists = buckets?.some(bucket => bucket.name === bucketName);
      
      if (!bucketExists) {
        console.log(`${bucketName} bucket does not exist, creating it now...`);
        const { data: bucketData, error: bucketError } = await supabase.storage.createBucket(bucketName, {
          public: true,
          fileSizeLimit: bucketName.includes('video') ? 50 * 1024 * 1024 : 10 * 1024 * 1024
        });
        
        if (bucketError) {
          console.error(`Error creating ${bucketName} bucket:`, bucketError);
        } else {
          console.log(`${bucketName} storage bucket created successfully`);
          
          // Set bucket to public
          const { error: policyError } = await supabase.storage.updateBucket(bucketName, {
            public: true
          });
          
          if (policyError) {
            console.error(`Error making ${bucketName} bucket public:`, policyError);
          } else {
            console.log(`${bucketName} bucket set to public`);
          }
        }
      } else {
        console.log(`${bucketName} bucket already exists`);
      }
    }
  } catch (err) {
    console.error('Error initializing storage buckets:', err);
  }
})();
